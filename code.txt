List<SummaryBatchModel> listObject = new List<SummaryBatchModel>();

                        bool ifFoundBundle = false;
                        foreach (var order in orders) //sell price in this loop
                        {
                            if (order.OrderNumber == "1737")
                            {
                                var test = 1;
                            }
                            SummaryBatchModel summaryObject = new SummaryBatchModel();

                            //summaryShopifyOrder = order.OrderName;
                            orderNameSequence.Add(order.OrderName);
                            var shipping = order.ShippingPrices.ShopMoney.Amount;
                            //string lineId = "#" + order.OrderNumber; // Customer PO Number, format like #0001 for hong kong
                            string lineId = "#" + lineItemCount; // Customer PO Number, format like #0001 for hong kong
                            bool excludeRefund = false;
                            //if there is a refund line item, should exclude the line item 
                            if (order.Refunds != null && order.Refunds.Count > 0)
                                excludeRefund = true;

                            for (var i = 0; i < order.LineItems.Count; i++)
                            {
                                                                
                                summaryObject.QuoteNo = "1001";
                                summaryObject.StyleNumber = null;
                                summaryObject.JANCode = null;                                
                                summaryObject.ShopifyOrder = null;
                                summaryObject.SellPrice = 0;
                                summaryObject.SKU = "Not yet SKU";
                                summaryObject.ProductDescription = "Not yet describe";                           
                                summaryObject.Title = null;                                
                                summaryObject.IsRefund = "0";

                                LineItem item = order.LineItems[i];
                                //1)item sku//marketing sku
                                //2)list of summarybatchmodel
                                //3)create new summarybatchmodel and add into list
                                //4)before create, check inside your list of summarybatchmodel, whether it has a record with existing marketing sku
                                var existingSummary = listObject.FirstOrDefault(x => x.StyleNumber == item.SKU);

                                if (existingSummary == null)
                                {
                                    summaryObject.IsRefund = "0";
                                    summaryObject.QuoteNo = "1001";
                                    summaryObject.ProductDescription = "Not yet describe";
                                    summaryObject.SKU = "Not yet SKU";
                                    summaryObject.ShopifyOrder = order.OrderName;
                                    summaryObject.StyleNumber = item.SKU;
                                    summaryObject.Title = translation.Header.Title;
                                }
                                qtyAndTitle += item.Quantity + " x " + item.Title + "_";

                                var ecommOrder = eCommOrders.FirstOrDefault(x => x.OrderNumber == order.OrderNumber && x.LineItemSKU == item.SKU);
                                var SKU = item.ProductId;
                                if (ecommOrder != null)
                                {
                                    ecommOrder.BatchNumber = translation.Header.Title;
                                    ecommOrder.LastUpdatedDate = DateTime.Now;
                                    ecommOrder.PayoutDate = payOutDate;
                                    ecommOrder.PayOutId = payOutId.ToString();
                                    processedEcommOrders.Add(ecommOrder);                                  

                                }

                                //it could be cases where there is no record on ecommorderinfo but orders from payout need to get processed
                                //so insert a new record
                                else
                                {
                                    ECommOrderInfo eCommOrder = new ECommOrderInfo();
                                    eCommOrder.BatchNumber = translation.Header.Title;
                                    eCommOrder.ShopName = shop.ShopName;
                                    eCommOrder.LineItemSKU = item.SKU;
                                    eCommOrder.Quantity = int.Parse(item.Quantity.ToString());
                                    eCommOrder.OrderNumber = order.OrderNumber;
                                    eCommOrder.LastUpdatedDate = DateTime.Now;
                                    eCommOrder.PayoutDate = payOutDate;
                                    eCommOrder.PayOutId = payOutId.ToString();
                                    newEcommOrders.Add(eCommOrder);
                                    processedEcommOrders.Add(eCommOrder);
                                }

                                if (!string.IsNullOrEmpty(item.SKU))
                                {
                                    //check if there is a line item with same catalog sky
                                    if (translation.LineItems.Any(x => x.Product.ProductCode == item.SKU))
                                    {

                                        var lineToUpdate = translation.LineItems.FirstOrDefault(x => x.Product.ProductCode == item.SKU);
                                        if (existingSummary == null)
                                        {
                                            //summaryObject.StyleNumber = lineToUpdate.Product.ProductCode;
                                            summaryObject.CatalogType = lineToUpdate.Product.Catalog.CatalogType.ToString();
                                        }
                                        //summaryObject.StyleNumber = lineToUpdate.Product.ProductCode;
                                        //summaryObject.CatalogType = lineToUpdate.Product.Catalog.CatalogType.ToString();
                                        decimal qty = item.Quantity;
                                        productQty += qty;
                                        //if found refund item, dont add into document
                                        //only add the line item where it's not a refund item
                                        if (!order.Refunds.Any(x => x.RefundLineItems.Any(y => y.LineItemId == item.Id)))
                                        {


                                            decimal price = 0;
                                            //set the current price first
                                            if (item.Prices != null && item.Prices.ShopMoney != null && item.Prices.ShopMoney.Amount > 0)
                                            {

                                                price = item.Prices.ShopMoney.Amount;
                                                if (existingSummary == null)
                                                {
                                                    summaryObject.SellPrice = price;
                                                }
                                            }

                                            //if there is a discount, apply the discount
                                            if (item.DiscountAllocations != null && item.DiscountAllocations.Count > 0)
                                            {
                                                //multiple quantity
                                                if (qty > 1)
                                                {
                                                    decimal discountPerItem = item.DiscountAllocations.First().Amount / qty;
                                                    price = item.Price - discountPerItem;
                                                    if (existingSummary == null)
                                                    {
                                                        summaryObject.SellPrice = price;
                                                    }
                                                }
                                                else
                                                {
                                                    price = item.Price - item.DiscountAllocations.First().Amount;
                                                    if (existingSummary == null)
                                                    {
                                                        summaryObject.SellPrice = price;
                                                    }
                                                }
                                            }

                                            //special template for japan only
                                            //deduct 14410 JPY for shipping
                                            //if (shop.ShopName == ConstantHelper.MarketName.japan)
                                            //{
                                            //    price -= 14410;
                                            //}

                                            lineToUpdate.Quantity += qty;

                                            //need to add order name into ff notes
                                            var ffNote = lineToUpdate.Notes.FirstOrDefault(x => x.Code == "FF");
                                            if (ffNote != null)
                                            {
                                                ffNote.Text += "," + order.OrderName;
                                            }
                                        }
                                        else //there is a refund item, check how many qty need to exclude
                                        {
                                            Refund refund = order.Refunds.FirstOrDefault(x => x.RefundLineItems.FirstOrDefault(y => y.LineItemId == item.Id) != null);
                                            if (refund != null)
                                            {
                                                decimal refundQty = refund.RefundLineItems.Select(x => x.Quantity).FirstOrDefault();
                                                item.Quantity -= refundQty;
                                                if (item.Quantity > 0)
                                                {
                                                    Steelcase.Standards.Sales.LineItem lineItem = PrepareSalesXmlDocumentLineItem(item, catalogKey, lineId, locale, lineItemCount, shop, false, order.OrderName);
                                                    translation.LineItems.Add(lineItem);
                                                    if (existingSummary == null)
                                                    {                                                        
                                                        summaryObject.IsRefund = "1";
                                                    }                                                    
                                                    lineItemCount++;
                                                }
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //if there is no refund, just add into document
                                        if (!excludeRefund)
                                        {
                                            Steelcase.Standards.Sales.LineItem lineItem = PrepareSalesXmlDocumentLineItem(item, catalogKey, lineId, locale, lineItemCount, shop, false, order.OrderName);
                                            translation.LineItems.Add(lineItem);
                                            productQty += item.Quantity;
                                            //summaryObject.StyleNumber = lineItem.Product.SKU;
                                            if (existingSummary == null)
                                            {
                                                //summaryObject.StyleNumber = lineItem.Product.ProductCode;
                                                summaryObject.CatalogType = lineItem.Product.Catalog.CatalogType.ToString();
                                                summaryObject.SellPrice = item.Price;
                                            }
                                            //summaryObject.StyleNumber = lineItem.Product.ProductCode;
                                            //summaryObject.CatalogType = lineItem.Product.Catalog.CatalogType.ToString();
                                            //summaryObject.SellPrice = item.Price;
                                            lineItemCount++;
                                        }
                                        else
                                        {
                                            //if found refund item, dont add into document
                                            //only add the line item where it's not a refund item
                                            if (!order.Refunds.Any(x => x.RefundLineItems.Any(y => y.LineItemId == item.Id)))
                                            {
                                                Steelcase.Standards.Sales.LineItem lineItem = PrepareSalesXmlDocumentLineItem(item, catalogKey, lineId, locale, lineItemCount, shop, false, order.OrderName);
                                                translation.LineItems.Add(lineItem);
                                                productQty += item.Quantity;                                                
                                                if (existingSummary == null)
                                                {
                                                    summaryObject.StyleNumber = lineItem.Product.ProductCode;
                                                    summaryObject.CatalogType = summaryObject.CatalogType = lineItem.Product.Catalog.CatalogType.ToString();
                                                    summaryObject.SellPrice = item.Price;
                                                }
                                                
                                                lineItemCount++;
                                            }
                                            else //there is a refund item, check how many qty need to exclude
                                            {
                                                Refund refund = order.Refunds.FirstOrDefault(x => x.RefundLineItems.FirstOrDefault(y => y.LineItemId == item.Id) != null);
                                                if (refund != null)
                                                {
                                                    decimal refundQty = refund.RefundLineItems.Select(x => x.Quantity).FirstOrDefault();
                                                    item.Quantity -= refundQty;
                                                    if (existingSummary == null)
                                                    {
                                                        summaryObject.IsRefund = "1";
                                                    }
                                                    if (item.Quantity > 0)
                                                    {
                                                        Steelcase.Standards.Sales.LineItem lineItem = PrepareSalesXmlDocumentLineItem(item, catalogKey, lineId, locale, lineItemCount, shop, false, order.OrderName);
                                                        translation.LineItems.Add(lineItem);
                                                        productQty += item.Quantity;

                                                        //summaryObject.ProductDescription = lineItem.Product.Description.ToString();
                                                        //summaryObject.StyleNumber = lineItem.Product.SKU;
                                                        if (existingSummary == null)
                                                        {

                                                            summaryObject.IsRefund = "1";
                                                            summaryObject.StyleNumber = lineItem.Product.ProductCode;
                                                            summaryObject.CatalogType = lineItem.Product.Catalog.CatalogType.ToString();
                                                            summaryObject.SellPrice = item.Price;
                                                        }                                              
                                                        lineItemCount++;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if (summaryObject.IsRefund == "0")
                                    {
                                        listObject.Add(summaryObject);
                                    }

can you spot why it is overwriting the previous object in the list?